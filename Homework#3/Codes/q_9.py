# -*- coding: utf-8 -*-
"""Q#9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Fnolphm7onYSa2InOrO_rNcOIvU5cwN
"""

import cvxpy as cp
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(0)
(m, n) = (300, 100)
A = np.random.rand(m, n); A = np.asmatrix(A)
b = A.dot(np.ones((n, 1)))/2; b = np.asmatrix(b)
c = -np.random.rand(n, 1); c = np.asmatrix(c)

x = cp.Variable(shape=(n, ))

constraints = [
    (A * x)[:, None]  <= b,
    x >= 0,
    x <= 1
]

obj = cp.Minimize(c.T * x)
prob = cp.Problem(
    objective=obj,
    constraints=constraints
)
prob.solve()

print("status: {}".format(prob.status))
print("optimal value: {}".format(prob.value))

thres = np.arange(0, 1.01, 0.01)

max_violations, obj_vals = [],[]
for t in thres:
    x_itr = x.value >= t
    max_violations.append(np.max(np.dot(A,x_itr)- b.T))
    obj_vals.append(np.dot(c.T,x_itr)[0])

max_violations = np.array(max_violations)
obj_vals = np.array(obj_vals).reshape(101, )

plt.plot(thres, max_violations)
plt.xlabel("threshold")
plt.ylabel("max violation")
plt.show()

U = obj_vals[(np.asarray(max_violations)<=0)].min()

plt.plot(thres, (np.ones_like(obj_vals) * U))
plt.plot(thres, obj_vals)
plt.xlabel("threshold")
plt.ylabel("objective")
plt.show()

U